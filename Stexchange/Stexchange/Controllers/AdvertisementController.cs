using Microsoft.AspNetCore.Mvc;using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.Extensions.Configuration;using Stexchange.Data;using Stexchange.Data.Models;using Stexchange.Data.Builders;using Stexchange.Data.Validation;using static System.String;namespace Stexchange.Controllers{    public class AdvertisementController : Controller    {        public AdvertisementController(Database db, IConfiguration config)        {            Database _databse = db;            IConfiguration _config = config;        }        private Database _database { get; }        private IConfiguration _config { get; }        public IActionResult PostAdvertisement()        {            return View();        }        public IActionResult Posted()        {            return View("Posted");        }                [HttpPost]        public async Task<IActionResult> PostAdvertisement(List<byte[]> images, string title, string description,             string name_nl, int quantity, string plant_type, string give_away, string with_pot, string name_lt="",             string light="", string water="", string ph="", string indigenous="")        {            //todo: def val planttype and withpot            try            {                if (ModelState.IsValid)                {                    ListingBuilder listingBuilder = new ListingBuilder();                    Listing finishedListing;                    //TODO: build a listing using the listing builder class                     ListingValidator listingVal = new ListingValidator();                    WithPotFilterValidator potVal = new WithPotFilterValidator();                    GiveAwayFilterValidator giveVal = new GiveAwayFilterValidator();                    List<Filter> mandatoryFilters = new List<Filter>();                    //using fluent validator to required properties                    if (images.First() != null && listingVal.Validate( new Listing()                                               {                                                   Description = description, Title = title, NameNl = name_nl, Quantity = quantity                                               }).IsValid                                                                                               && potVal.Validate(new Filter(with_pot)).IsValid                                               && giveVal.Validate(new Filter(give_away)).IsValid)                    {                          listingBuilder.SetProperty("Title", title.Trim())                                        .SetProperty("Description", description.Trim())                                        .SetProperty("NameNl", name_nl.Trim())                                        .SetProperty("Quantity", quantity);                        //adding validated required filters to list                        mandatoryFilters.Add(new Filter(with_pot))  ;                        mandatoryFilters.Add(new Filter(give_away)) ;                        //now the non-required properties                        List<Filter> validatedFilters = FilterListValidator(mandatoryFilters, ph, water, plant_type, indigenous, light);                        if (!IsNullOrEmpty(name_lt)) listingBuilder.SetProperty("NameLt", name_lt.Trim());                                                finishedListing = listingBuilder.Complete();                        List<FilterListing> filterListings = MakeFilterListing(validatedFilters, finishedListing);                        List<byte[]> validatedImages = ImageListValidation(images);                        _database.AddAsync(finishedListing);                        _database.SaveChangesAsync();                        //todo: retrieve id from listing and add THIS listing to database in filterlistings table                        //todo: ensure that the listing is made before the filters who need this FK                        foreach (FilterListing filterListing in filterListings)                        {                            await _database.AddAsync(filterListing);                            await _database.SaveChangesAsync();                        }                        //todo: how should I add the FK of the listing in the pictures table?                        foreach (byte[] image in validatedImages)                        {                            await _database.AddAsync(image);                            await _database.SaveChangesAsync();                        }                                            }                                    }            }            catch (Exception e)            {                ViewBag.Error = "Error: " + e.ToString();            }                                  //TODO: make validation page in view                      return View(); // todo: insert something here        }



        /// <summary>
        /// adding the properties of filterlisting to link the listing to their filters
        /// </summary>
        /// <param name="filters"></param>
        /// <param name="finishedListing"></param>
        /// <returns></returns>        private List<FilterListing> MakeFilterListing(List<Filter> filters, Listing finishedListing)        {            List<FilterListing> filterListings = new List<FilterListing>();            foreach (Filter fil in filters)            {                //adding new filterlisting instance to filterListings                filterListings.Add(new FilterListing(finishedListing, fil));            }            return filterListings;        }

        /// <summary>
        /// adds validated props to filterlist
        /// </summary>
        /// <param name="filts"></param>
        /// <param name="ph"></param>
        /// <param name="water"></param>
        /// <param name="plant_type"></param>
        /// <param name="indigenous"></param>
        /// <param name="light"></param>
        /// <returns></returns>        private List<Filter> FilterListValidator(List<Filter> filters, string ph, string water, string plant_type, string indigenous, string light)        {            PhFilterValidator phVal = new PhFilterValidator();            WaterFilterValidator waterVal = new WaterFilterValidator();            LightFilterValidator lightVal = new LightFilterValidator();            IndigenousFilterValidator indiVal = new IndigenousFilterValidator();            if (phVal.Validate(new Filter(ph)).IsValid) filters.Add(new Filter(ph));            if (waterVal.Validate(new Filter(water)).IsValid) filters.Add(new Filter(plant_type));            if (lightVal.Validate(new Filter(light)).IsValid) filters.Add(new Filter(light));            if (indiVal.Validate(new Filter(indigenous)).IsValid) filters.Add(new Filter(indigenous));            return filters;        }        /// <summary>
        /// validates all images and returns only the validated images
        /// </summary>
        /// <param name="images"></param>
        /// <returns></returns>        private List<byte[]> ImageListValidation(List<byte[]> images)        {            ImageValidator imgVal = new ImageValidator();            List<byte[]> validatedImg = new List<byte[]>();            foreach (byte[] img in images)            {                if(imgVal.Validate(new ImageData(img)).IsValid) validatedImg.Add(img);            }

            //todo: if validatedImg is still empty, it will return an empty list
            return validatedImg;        }    }}
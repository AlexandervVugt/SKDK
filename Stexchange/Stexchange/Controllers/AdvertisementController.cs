using Microsoft.AspNetCore.Mvc;using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.Extensions.Configuration;using Stexchange.Data;using Stexchange.Data.Models;using Stexchange.Data.Builders;using Stexchange.Data.Validation;using static System.String;namespace Stexchange.Controllers{    public class AdvertisementController : Controller    {        public AdvertisementController(Database db, IConfiguration config)        {            Database _databse = db;            IConfiguration _config = config;        }        private Database _database { get; }        private IConfiguration _config { get; }        public IActionResult PostAdvertisement()        {            return View();        }                [HttpPost]        //                                                     TODO!!!!        public async Task<IActionResult> PostAdvertisement(List<byte[]> images, string title, string description,             string name_nl, int quantity, string plant_type, string give_away, string with_pot, string name_lt="",             string light="", string water="", string ph="", string indigenous="")        {            //todo: def val planttype and withpot            try            {                if (ModelState.IsValid)                {                    ListingBuilder listingBuilder = new ListingBuilder();                    List<FilterListing> filterListings = new List<FilterListing>();                    List<Filter> filters = new List<Filter>();                    List<ImageData> imageList = new List<ImageData>();                    Listing finishedListing;                    


                    //TODO: build a listing using the listing builder class 

                    //these are the required properties of the listing being built
                    if (images.First() != null && !IsNullOrEmpty(title)                                             && !IsNullOrEmpty(description)                                             && !IsNullOrEmpty(name_nl)                                             && !IsNullOrEmpty(plant_type)                                            && quantity > 0                                            && !IsNullOrEmpty(give_away))                    {                          listingBuilder.SetProperty("Title", title)                                        .SetProperty("Description", description)                                        .SetProperty("NameNl", name_nl)                                        .SetProperty("Quantity", quantity);                          //using fluent validator to validate and add filters                          WithPotFilterValidator potVal = new WithPotFilterValidator();                          GiveAwayFilterValidator giveVal = new GiveAwayFilterValidator();

                        if (potVal.Validate(new Filter(with_pot)).IsValid) filters.Add(new Filter(with_pot)) ;                        if (giveVal.Validate(new Filter(give_away)).IsValid) filters.Add(new Filter(give_away));                        //now the non-required properties
                        PhFilterValidator phVal = new PhFilterValidator();                        WaterFilterValidator waterVal = new WaterFilterValidator();                        LightFilterValidator lightVal = new LightFilterValidator();                        IndigenousFilterValidator indiVal = new IndigenousFilterValidator();                        if (phVal.Validate(new Filter(ph)).IsValid) filters.Add(new Filter(ph));                        if (waterVal.Validate(new Filter(water)).IsValid) filters.Add(new Filter(plant_type));                        if (lightVal.Validate(new Filter(light)).IsValid) filters.Add(new Filter(light));                        if (indiVal.Validate(new Filter(indigenous)).IsValid) filters.Add(new Filter(indigenous));                        if (!IsNullOrEmpty(name_lt)) listingBuilder.SetProperty("NameLt", name_lt);                        //returning the finished listing with listingbuilder .complete()                        finishedListing = listingBuilder.Complete();                        //adding the properties of filterlisting to link the listing to their filters                        foreach (Filter fil in filters)                        {                            //adding new filterlisting instance to filterListings                            filterListings.Add(new FilterListing(finishedListing, fil));                        }                        foreach (var image in images)                        {                            imageList.Add(new ImageData(finishedListing, image));                        }                    }                    

                }            }            catch (Exception e)            {                ViewBag.Error = "Error: " + e.ToString();            }                       //TODO: validate all name values from the form per value if they are empty or wrong and show feedback             //await Database.AddAsync();            //await Database.SaveChangesAsync();            //TODO: input the new tables into the database             //TODO: make validation page in view                      return View(); // todo: insert something here        }    }}